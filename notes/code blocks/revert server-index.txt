NEW CODE (REVERTING 22-08-18)

/* 
Main Server for App, listens on 4000, connects to:
> react app (3000), database (mongo cloud), payments (stripe)
*/

// Imports
const express = require("express"); // server app
const cors = require("cors"); // cross-origin resource sharing (browser/server)
const mongoose = require("mongoose"); // mongodb helper
const authRoutes = require("./routes/authRoutes"); // routes/auth logic
const cookieParser = require("cookie-parser"); // manage cookies
// const path = require('path'); // might not be used?
const dotenv = require('dotenv');


// Env Variables
let env = dotenv.config({ path: '../../.env' });
const MONGO_USER = env.parsed.MONGO_USER;
const MONGO_PASS = env.parsed.MONGO_PASS;
const STATIC_DIR = env.parsed.STATIC_DIR;
const DOMAIN = env.parsed.DOMAIN;
const STRIPE_SECRET_KEY = env.parsed.STRIPE_SECRET_KEY

// express server app
const app = express();

// LISTEN on Port 4000 
app.listen(4000, (err) => {
    if (err) {
        console.log(err);
    } else {
        console.log("sucessfully created server, listening at port 4000...");
    }
});

// GET React App @index.html
app.get("/", (req, res) => {
    const filePath = path.resolve(STATIC_DIR + "../public/index.html");
    res.sendFile(filePath);
});

//ENDPOINT: Annual Checkout Session
app.post("/create-annual-checkout-session", async (req, res) => {
    const domainURL = DOMAIN;
    const { priceId } = req.body;
    try {
        const session = await stripe.checkout.sessions.create({
            mode: "subscription",
            line_items: [
                {
                    price: priceId,
                    quantity: 1,
                },
            ],
            // ?session_id={CHECKOUT_SESSION_ID} means the redirect will have the session ID set as a query param
            success_url: `http://localhost:3000`,
            cancel_url: `${domainURL}/canceled.html`,
            // automatic_tax: { enabled: true }
        });
        return res.redirect(303, session.url);
    } catch (e) {
        res.status(400);
        console.log("stripe session failed")
        return res.send({
            error: {
                message: e.message,
            }
        });
    }
});

// connect to stripe using secret key
const stripe = require('stripe')(STRIPE_SECRET_KEY);
if (stripe.error) {
    throw new Error(`Unable to connect to Stripe`);
} else {
    console.log("sucessfully connected to stripe...")
}

// the price ID passed from env
const priceId = '{{PRICE_ID}}';

// establish connection to mongoose atlas cloud db
mongoose
    .connect("mongodb+srv://" + MONGO_USER + ":" + MONGO_PASS + "@my-daily-pdf.ddfuw.mongodb.net/main?retryWrites=true&w=majority", {
        useNewUrlParser: true,
        useUnifiedTopology: true,
    })
    .then(() => {
        console.log("sucessfully connected to mongo atlass db...");
    })
    .catch((err) => {
        console.log("mongooose failed")
        console.log(err.message);
    });


// conect to React app on 3000
app.use(
    cors({
        origin: ["http://localhost:3000"],
        methods: ["GET", "POST"],
        credentials: true,
    })
);
console.log("sucessfully connected to port 3000...")

app.use(cookieParser()); // parse cookies by default
app.use(express.json()); // use json to transfer files
app.use("/", authRoutes); // point to routes file
